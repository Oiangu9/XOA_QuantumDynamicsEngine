1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
10
double VR=0.001, grainSigma=0.05; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.001 grainSigma=0.05 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.01, grainSigma=0.05; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.01 grainSigma=0.05 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.1, grainSigma=0.05; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.1 grainSigma=0.05 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.5, grainSigma=0.05; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.5 grainSigma=0.05 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=2.0, grainSigma=0.05; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=2.0 grainSigma=0.05 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.0001, grainSigma=0.05; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.0001 grainSigma=0.05 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.001, grainSigma=0.1; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.001 grainSigma=0.1 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.01, grainSigma=0.1; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.01 grainSigma=0.1 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.1, grainSigma=0.1; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.1 grainSigma=0.1 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.5, grainSigma=0.1; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.5 grainSigma=0.1 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=2.0, grainSigma=0.1; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=2.0 grainSigma=0.1 WFsigma=7.0 
1.5
double sigma=7.0; double mu=0.0; double k=0.0; return pow(1.0/(2*PI*sigma*sigma),0.25)*exp(J*k*x-0.25*pow((x-mu)/sigma,2));
return speckle.evaluate(x);
5000 -47.0 47.0
5000
0.005
1.0
16.29940949
G
20
R
12
double VR=0.0001, grainSigma=0.1; class SplineFunction { public: SplineFunction(Eigen::VectorXd const &x_vec, Eigen::VectorXd const &y_vec) : x_min(x_vec.minCoeff()), x_max(x_vec.maxCoeff()), spline_(Eigen::SplineFitting<Eigen::Spline<double, 1>>::Interpolate( y_vec.transpose(), std::min<int>(x_vec.rows() - 1, 3), scaled_values(x_vec))) { } double operator()(double x) const { return spline_(scaled_value(x))(0); } private: double scaled_value(double x) const { return (x - x_min) / (x_max - x_min); } Eigen::RowVectorXd scaled_values(Eigen::VectorXd const &x_vec) const { return x_vec.unaryExpr([this](double x) { return scaled_value(x); }).transpose(); } double x_min; double x_max; Eigen::Spline<double, 1> spline_; }; class SpecklePotential { public: SpecklePotential(double VR, double grainSigma, double xmax, double xmin) : VR(VR), grainSigma(grainSigma), xmax(xmax), xmin(xmin) { double Vmin=-VR, Vmax=4*VR; int nV=3001; double dV=(Vmax-Vmin)/nV; VectorXd possibleV(nV+1), probabDensity(nV+1); double auxV; for(int i=0; i<=nV; ++i){ auxV = Vmin + i*dV; possibleV(i) = auxV; probabDensity(i) = speckleProbabDensity( auxV, VR); } double* probabClist = probabDensity.data(); std::default_random_engine randomGenerator; std::discrete_distribution<int> distribution (probabClist,probabClist+nV); int nGrainIntervals = (int) (xmax-xmin)/grainSigma; VectorXd posGrain(nGrainIntervals + 1), potentialGrain(nGrainIntervals +1); for(int i=0; i<=nGrainIntervals; ++i){ posGrain(i) = xmin + i*grainSigma; potentialGrain(i) = possibleV(distribution(randomGenerator)); } splinePtr = new SplineFunction(posGrain, potentialGrain); } double evaluate(double x) { return (*splinePtr)(x); } private: double VR, grainSigma, xmax, xmin; SplineFunction* splinePtr; double speckleProbabDensity(double V, double VR){ if(V/VR + 1 >=0){ return (1/(EULER*VR))*std::exp(-V/VR);} else{ return 0.0; } } }; SpecklePotential speckle(VR, grainSigma, xmax, xmin); 
 
/AL1D_Speckle/Speckle Potential VR=0.0001 grainSigma=0.1 WFsigma=7.0 
